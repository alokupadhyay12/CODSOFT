import tkinter as tk
from tkinter import messagebox
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Sample movie dataset (can be replaced with a full dataset)
data = {
    'title': [
        'The Matrix', 'John Wick', 'Inception',
        'Interstellar', 'The Prestige', 'The Dark Knight', 'Memento'
    ],
    'description': [
        'A hacker discovers reality is a simulation and fights against machines.',
        'An ex-hitman seeks vengeance for the death of his dog.',
        'A thief steals information by infiltrating dreams.',
        'A team travels through a wormhole in search of a new home for humanity.',
        'Two magicians compete using science and illusion.',
        'A vigilante defends a city from a criminal mastermind.',
        'A man with short-term memory loss uses notes and tattoos to hunt his wife\'s killer.'
    ]
}

# Convert to DataFrame
df = pd.DataFrame(data)

# TF-IDF Vectorization
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['description'])
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Movie title to index mapping
indices = pd.Series(df.index, index=df['title']).drop_duplicates()

# Recommendation function
def get_recommendations(title, num_recs=5):
    title = title.strip()
    if title not in indices:
        return []
    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:num_recs+1]
    movie_indices = [i[0] for i in sim_scores]
    return df['title'].iloc[movie_indices].tolist()

# GUI using Tkinter
def create_gui():
    def recommend():
        movie = entry.get()
        if not movie:
            messagebox.showwarning("Input Error", "Please enter a movie title.")
            return
        results = get_recommendations(movie)
        listbox.delete(0, tk.END)
        if results:
            for item in results:
                listbox.insert(tk.END, item)
        else:
            listbox.insert(tk.END, "No recommendations found.")

    window = tk.Tk()
    window.title("Movie Recommendation System")
    window.geometry("400x300")

    tk.Label(window, text="Enter a Movie Title:", font=("Helvetica", 12)).pack(pady=10)
    entry = tk.Entry(window, width=40)
    entry.pack()

    tk.Button(window, text="Get Recommendations", command=recommend).pack(pady=10)

    listbox = tk.Listbox(window, width=50, height=10)
    listbox.pack(pady=10)

    window.mainloop()

# Run the GUI
create_gui()
